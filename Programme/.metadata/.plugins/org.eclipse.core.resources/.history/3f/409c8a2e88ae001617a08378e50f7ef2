package be.mousty.accessToDao;
/**
	Classe métier relatif liée à la classe Moniteur et MoniteurDAO.
	@author Adrien MOUSTY
	@version Finale 1.3.3
	@category Métier
*/
import java.sql.Date;
import java.util.ArrayList;
import java.util.Random;

import be.mousty.dao.AbstractDAOFactory;
import be.mousty.dao.DAO;
import be.mousty.pojo.Moniteur;

public class MoniteurATD extends UtilisateurATD{
	// VARIABLES 
	private int anneeDexp;
	private boolean disponiblecoursParticulier;
	private ArrayList<AccreditationATD> listAccreditation = new ArrayList<AccreditationATD>();



	// CONSTRUCTEURS
	public MoniteurATD(){}
	public MoniteurATD(String nom, String pre, String adresse, String sexe, Date dateNaissance, 
			String pseudo, String mdp, int typeMoniteur, ArrayList<AccreditationATD> listAccreditation, boolean disponiblecoursParticulier){
		super(nom, pre, adresse, sexe, dateNaissance, pseudo, mdp, typeMoniteur);
		Random r = new Random();
		this.anneeDexp 	= r.nextInt(10 - 0 + 1) + 0; // entre 10 et 0
		this.listAccreditation = listAccreditation;
		this.disponiblecoursParticulier = disponiblecoursParticulier;
	}
	
	public MoniteurATD(Moniteur M){
		super(M.getNom(), M.getPre(), M.getAdresse(), M.getSexe(), M.getDateNaissance(), M.getPseudo(), M.getMdp(), M.getTypeUtilisateur());
		this.anneeDexp 	= M.getAnneeExp(); // entre 10 et 0
		this.listAccreditation = AccreditationATD.changeTypeAccredilist(M.getAccrediList());
		this.disponiblecoursParticulier = M.getDisponiblecoursParticulier();
	}
	


	// APPEL AUX METHODES DAO DANS LES CLASSES METIER
	AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
	DAO<Moniteur> MoniteurDAO = adf.getMoniteurDAO();
	public int					create				(Moniteur m) 	{ return MoniteurDAO.create(m); 				}
	public boolean 				delete				()	 			{ return MoniteurDAO.delete(null); 				}
	public Moniteur 			getId				(Moniteur m) 	{ return MoniteurDAO.getId(m); 					}
	public boolean 				update				(Moniteur m) 	{ return MoniteurDAO.update(m); 				}
	public Moniteur 			find				(int id) 		{ return MoniteurDAO.find(id); 					} 
	public ArrayList<Moniteur> 	getListMon			() 				{ return MoniteurDAO.getList(); 				} 
	public ArrayList<Moniteur> 	getListSelonCriteres(Moniteur m) 	{ return MoniteurDAO.getListSelonCriteres(m); 	}
	public ArrayList<Moniteur> 	getListDispo		(int typeCours, long numSemaine, String periode) { return MoniteurDAO.getMyListSelonID(typeCours, numSemaine, -1,  periode); }

	// METHODES 

	/*// Pour ne pas additionner 2 fois le même moniteur
	public void addAccreditation(AccreditationATD ac){
		if(!listAccreditation.contains(ac))
			listAccreditation.add(ac);
	}*/
	
	public MoniteurATD findM (int id){
		MoniteurATD MATD = new MoniteurATD();
		Moniteur M = find(id);
		MATD.setAdresse(M.getAdresse());
		MATD.setDisponiblecoursParticulier(M.getDisponiblecoursParticulier());
		MATD.setAnneeExp(M.getAnneeExp());
		MATD.setAccrediList(AccreditationATD.changeTypeAccredilist(M.getAccrediList()));
		MATD.setDateNaissance(M.getDateNaissance());
		MATD.setNom(M.getNom());
		MATD.setPre(M.getPre());
		MATD.setSexe(M.getSexe());
		return MATD;
	}
	
	public int inscriptionMoniteur(){
		Moniteur M = new Moniteur();
		M.setAnneeExp(0);
		M.setAccrediList(AccreditationATD.changeTypeAccredilistEnATD(getAccrediList()));
		M.setDisponiblecoursParticulier(getDisponiblecoursParticulier());
		M.setPseudo(getPseudo());
		M.setMdp(getMdp());
		M.setTypeUtilisateur(1);
		M.setNom(getNom());
		M.setPre(getPre());
		M.setDateNaissance(getDateNaissance());
		M.setAdresse(getAdresse());
		M.setSexe(getSexe());
		return create(M);
	}

	
	

	
	
	public ArrayList<MoniteurATD> getListDispoATD(int typeCours, long numSemaine, String nomAccred, String periode){
		ArrayList<Moniteur> listM = getListDispo(typeCours, numSemaine, periode);
		ArrayList<MoniteurATD> listMATD = new ArrayList<MoniteurATD>();
		
		for (int i = 0; i < listM.size(); i++) {
			//if(listM.get(i).getAccrediList().contains(numAccred)){
			
			MoniteurATD MATD = new MoniteurATD();
			MATD.setAdresse(listM.get(i).getAdresse());
			MATD.setAnneeExp(listM.get(i).getAnneeExp());
			MATD.setDisponiblecoursParticulier(listM.get(i).getDisponiblecoursParticulier());
			MATD.setAccrediList(AccreditationATD.changeTypeAccredilist(listM.get(i).getAccrediList()));
			MATD.setDateNaissance(listM.get(i).getDateNaissance());
			MATD.setNom(listM.get(i).getNom());
			MATD.setPre(listM.get(i).getPre());
			MATD.setSexe(listM.get(i).getSexe());
			
			
			/*for (int k = 0; k < MATD.getAccrediList().size() ; k++ ){
				System.out.println("numAccred : " + nomAccred + " Accredilist : " + MATD.getAccrediList().get(i).getNom());
			}*/
			
			listMATD.add(MATD);
		//}
		}
		return listMATD;
	}
	
	public int getIdATD(MoniteurATD MATD){
		Moniteur M = new Moniteur();
		M.setAdresse(MATD.getAdresse());
		M.setAnneeExp(MATD.getAnneeExp());
		M.setDisponiblecoursParticulier(MATD.getDisponiblecoursParticulier());
		M.setAccrediList(AccreditationATD.changeTypeAccredilistEnATD(MATD.getAccrediList()));
		M.setDateNaissance(MATD.getDateNaissance());
		M.setNom(MATD.getNom());
		M.setPre(MATD.getPre());
		M.setSexe(MATD.getSexe());
		M.setNumMoniteur(-1);
		M.setNumPersonne(-1);
		M.setNumUtilisateur(-1);
		return  getId(M).getNumPersonne();
	}
	
	// Mise à jour de la disponibilite pour les cours particulier du moniteur
	public boolean updateDispo	(int numMoniteur) {
		MoniteurATD ATD = new MoniteurATD();
		return MoniteurDAO.update(ATD.find(numMoniteur));
	}

	// METHODE SURCHARGEE
	@Override
	public String toString() { 
		return 
				super.toString()+ System.getProperty("line.separator")
				+ "MONITEUR, a accumule" + anneeDexp + " année(s) d'exérience." + System.getProperty("line.separator");
	}

	// PROPRIETES
	public int 		getAnneeExp								()										{ return anneeDexp; 	}
	public boolean 	getDisponiblecoursParticulier			()	 									{ return disponiblecoursParticulier; }
	public void 	setAnneeExp 							(int el) 								{ this.anneeDexp = el; 	}
	public void 	setDisponiblecoursParticulier			(boolean disponiblecoursParticulier) 	{ this.disponiblecoursParticulier = disponiblecoursParticulier; }
	public ArrayList<AccreditationATD> getAccrediList		() 										{ return listAccreditation; }
	public void setAccrediList	(ArrayList<AccreditationATD> accrediList) 							{ this.listAccreditation = accrediList; 	}
	
	
}

