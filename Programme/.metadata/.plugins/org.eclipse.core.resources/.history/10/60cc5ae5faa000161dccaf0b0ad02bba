package DAO;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import POJO.Client;
import POJO.Cours;
import POJO.Eleve;
import POJO.Moniteur;
import POJO.Reservation;
import POJO.Semaine;


public class ReservationDAO extends DAO<Reservation> {
	
	public ReservationDAO(Connection conn) {
		super(conn);
	}

	public int create(Reservation obj) { 
		try
		{
			String insertReservation 	= "INSERT INTO Reservation (heureDebut, heurefin) VALUES (?,?)";
			PreparedStatement pst_Res = connect.prepareStatement(insertReservation);
			pst_Res.setInt(1, obj.getHeureDebut());
			pst_Res.setInt(2, obj.getHeureFin());
			pst_Res.executeUpdate();
			pst_Res.close();
			
			PreparedStatement pst_numReserv;
			String selectNumReserv = "SELECT MAX(numReservation) FROM Reservation";
			pst_numReserv = this.connect.prepareStatement(selectNumReserv);
			ResultSet rs = pst_numReserv.executeQuery();
			while (rs.next()) { obj.setNumReservation(rs.getInt(1)); }
			System.out.println("ReservationDao -> " + obj.getNumReservation());
			
			String insertReservCli 		= "INSERT INTO ReservationClient 	(numReservation, numClient) VALUES (?,?)";
			String insertReservEleve 	= "INSERT INTO ReservationEleve 	(numReservation, numEleve) 	VALUES (?,?)";
			String insertCoursMoniteur 	= "INSERT INTO CoursMoniteur 		(numCours, numMoniteur) 	VALUES (?,?)";
			String insertCoursSemaine 	= "INSERT INTO CoursSemaine 		(numCours, numSemaine)	 	VALUES (?,?)";
			String insertReservCours 	= "INSERT INTO ReservationCours 	(numReservation, numCours) 	VALUES (?,?)";
			
			
			PreparedStatement pst_Res_Cli = connect.prepareStatement(insertReservCli);
			PreparedStatement pst_Res_Ele = connect.prepareStatement(insertReservEleve);
			PreparedStatement pst_Cou_Mon = connect.prepareStatement(insertCoursMoniteur);
			PreparedStatement pst_Cou_Sem = connect.prepareStatement(insertCoursSemaine);
			PreparedStatement pst_Res_Cou = connect.prepareStatement(insertReservCours);
			

			pst_Res_Cli.setInt(1, obj.getNumReservation());
			pst_Res_Cli.setInt(2, obj.getClient().getNumPersonne());
			
			pst_Res_Ele.setInt(1, obj.getNumReservation());
			pst_Res_Ele.setInt(2, obj.getEleve().getNumPersonne());

			pst_Cou_Mon.setInt(1, obj.getCours().getNumCours());
			pst_Cou_Mon.setInt(2, obj.getMoniteur().getNumPersonne());
			
			pst_Cou_Sem.setInt(1, obj.getCours().getNumCours());
			pst_Cou_Sem.setInt(2, obj.getSemaine().getNumSemaine());
			
			pst_Res_Cou.setInt(1, obj.getNumReservation());
			pst_Res_Cou.setInt(2, obj.getCours().getNumCours());
			
			
			pst_Res_Cli.executeUpdate();
			pst_Res_Ele.executeUpdate();
			pst_Cou_Mon.executeUpdate();
			pst_Cou_Sem.executeUpdate();
			pst_Res_Cou.executeUpdate();
			
			
			pst_Res_Cli.close();
			pst_Res_Ele.close();
			pst_Cou_Mon.close();
			pst_Cou_Sem.close();
			pst_Res_Cou.close();
			
			return obj.getNumReservation();
		}

		catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			return -1;
		}
	}
	public boolean delete(Reservation obj) {
		return false;
	}

	public boolean update(Reservation obj) {
		return false;
	}

	// On cherche un élève grâce à son id
	public Reservation find(int id) {
		/*Reservation reservation = new Reservation();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM reservation WHERE numReservation = ?";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				reservation.setPseudo(rs.getString("pseudo"));
				reservation.setMdp(rs.getString("mdp"));
				reservation.setTypeReservation(rs.getInt("typeReservation"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return reservation;*/
		return null;
	}

	public  ArrayList<Reservation> getList() {
		ArrayList<Reservation> liste = new ArrayList<Reservation>();

		PreparedStatement pst = null;
		try {
			
			
			String sql = "SELECT * FROM Cours "
					+ "INNER JOIN CoursMoniteur ON CoursMoniteur.numCours = Cours.numCours "
					+ "INNER JOIN CoursSemaine ON CoursSemaine.numCours = Cours.numCours "
					+ "INNER JOIN Personne On Personne.numPersonne = CoursMoniteur.numMoniteur "
					+ "INNER JOIN ReservationCours ON ReservationCours.numCours = Cours.numCours "
					+ "INNER JOIN Reservation ON Reservation.numReservation = ReservationCours.numReservation "
					+ "INNER JOIN ReservationClient ON ReservationClient.numReservation = Reservation.numReservation "
					+ "INNER JOIN ReservationEleve ON ReservationEleve.numReservation = Reservation.numReservation;";
			
			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				String selectSemaine 	= "SELECT * FROM Semaine	WHERE numSemaine 	= ? ";
				String selectCours 		= "SELECT * FROM Cours 		WHERE numCours 		= ? ";
				String selectEleve 		= "SELECT * FROM Elev 		WHERE numElev 		= ? ";
				String selectClient 	= "SELECT * FROM Client 	WHERE numClient 	= ? ";
				String selectMoniteur 	= "SELECT * FROM Moniteur	WHERE numMoniteur 	= ? ";
				
				PreparedStatement pst_Res_Cli = connect.prepareStatement(insertReservCli);
				
				
				Reservation reservation = new Reservation(rs.getInt("heureDebut"), rs.getInt("heureFin"), rs.getInt("numReservation"),
						new Semaine(),
						new Cours(),
						new Eleve (),
						new Client (),
						new Moniteur());
				liste.add(reservation);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}
		
}

