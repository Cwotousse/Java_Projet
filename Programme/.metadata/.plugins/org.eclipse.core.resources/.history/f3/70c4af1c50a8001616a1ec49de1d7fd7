package be.mousty.fenetre;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicProgressBarUI;

import be.mousty.utilitaire.ProgressCircleUI;

public class F_PayerReservation extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1722632999901224579L;
	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					F_PayerReservation frame = new F_PayerReservation();
					frame.setVisible(true);
					
					frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
					frame.getContentPane().add(new CircularProgressTest().makeUI());
					frame.setSize(320, 240);
					frame.setLocationRelativeTo(null);
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public F_PayerReservation() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		/*public static void main(String... args) {
			EventQueue.invokeLater(() -> {
				JFrame f = new JFrame();
				f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
				f.getContentPane().add(new CircularProgressTest().makeUI());
				f.setSize(320, 240);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
			});
		}*/
	}
}

class CircularProgressTest {
	public JComponent makeUI() {
		JProgressBar progress = new JProgressBar();
		// use JProgressBar#setUI(...) method
		progress.setUI(new ProgressCircleUI());
		progress.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		progress.setStringPainted(true);
		progress.setFont(progress.getFont().deriveFont(24f));
		progress.setForeground(Color.ORANGE);

		(new Timer(50, e -> {
			int iv = Math.min(100, progress.getValue() + 1);
			progress.setValue(iv);
		})).start();

		JPanel p = new JPanel();
		p.add(progress);
		return p;
	}
}

class ProgressCircleUI extends BasicProgressBarUI {
	@Override public Dimension getPreferredSize(JComponent c) {
		Dimension d = super.getPreferredSize(c);
		int v = Math.max(d.width, d.height);
		d.setSize(v, v);
		return d;
	}
	@Override public void paint(Graphics g, JComponent c) {
		Insets b = progressBar.getInsets(); // area for border
		int barRectWidth  = progressBar.getWidth()  - b.right - b.left;
		int barRectHeight = progressBar.getHeight() - b.top - b.bottom;
		if (barRectWidth <= 0 || barRectHeight <= 0) {
			return;
		}

		// draw the cells
		Graphics2D g2 = (Graphics2D) g.create();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		g2.setPaint(progressBar.getForeground());
		double degree = 360 * progressBar.getPercentComplete();
		double sz = Math.min(barRectWidth, barRectHeight);
		double cx = b.left + barRectWidth  * .5;
		double cy = b.top  + barRectHeight * .5;
		double or = sz * .5;
		double ir = or * .5; //or - 20;
		Shape inner = new Ellipse2D.Double(cx - ir, cy - ir, ir * 2, ir * 2);
		Shape outer = new Arc2D.Double(
				cx - or, cy - or, sz, sz, 90 - degree, degree, Arc2D.PIE);
		Area area = new Area(outer);
		area.subtract(new Area(inner));
		g2.fill(area);
		g2.dispose();

		// Deal with possible text painting
		if (progressBar.isStringPainted()) {
			paintString(g, b.left, b.top, barRectWidth, barRectHeight, 0, b);
		}
	}
