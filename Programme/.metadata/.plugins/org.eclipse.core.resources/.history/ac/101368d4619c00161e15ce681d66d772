package FENETRE;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.border.EmptyBorder;

import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.SqlDateModel;

import DAO.AbstractDAOFactory;
import DAO.DAO;
import FENETRE.F_Inscription.DateLabelFormatter;
import POJO.Accreditation;
import POJO.Client;
import POJO.Moniteur;

public class F_AjoutEleve extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					F_AjoutEleve frame = new F_AjoutEleve();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public F_AjoutEleve() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		// News
		JLabel lblInscription 		= new JLabel("Inscription");
		JLabel lblNom 				= new JLabel("Nom");
		JLabel lblPre 				= new JLabel("Prenom");
		JLabel lblDateNaiss 		= new JLabel("Date de naissance");
		JLabel lblAdresse 			= new JLabel("Adresse");
		JLabel lblAdresseFact 		= new JLabel("Adresse de facturation");
		JLabel lbl_errLab 			= new JLabel("");
		JRadioButton rdbtnH 		= new JRadioButton("Homme");
		JRadioButton rdbtnF 		= new JRadioButton("Femme");
		
		
		JTextField txtF_nom 		= new JTextField();
		JTextField txtF_pre 		= new JTextField();
		JTextField txtF_adresse 	= new JTextField();
		
		// Set tooltip
		txtF_nom.setToolTipText		("Nom");
		txtF_pre.setToolTipText		("Prenom");
		txtF_adresse.setToolTipText	("Adresse");

		// Set color
		lbl_errLab.setForeground(Color.RED);

		// Fonts
		lblInscription.setFont	(new Font("Yu Gothic UI", Font.PLAIN, 13));
		lblNom.setFont			(new Font("Yu Gothic UI", Font.PLAIN, 11));
		lblPre.setFont			(new Font("Yu Gothic UI", Font.PLAIN, 11));
		lblDateNaiss.setFont	(new Font("Yu Gothic UI", Font.PLAIN, 11));
		lblAdresse.setFont		(new Font("Yu Gothic UI", Font.PLAIN, 11));
		lblAdresseFact.setFont	(new Font("Yu Gothic UI", Font.PLAIN, 11));

		// Bounds 
		lblInscription.setBounds	(10, 11, 67, 14);
		lblNom.setBounds			(10, 31, 46, 14);
		lblPre.setBounds			(10, 84, 130, 14);
		lblDateNaiss.setBounds		(10, 132, 130, 14);
		lblAdresse.setBounds		(10, 185, 130, 14);
		lblAdresseFact.setBounds	(159, 185, 214, 15);
		rdbtnH.setBounds			(159, 128, 67, 23);
		rdbtnF.setBounds			(228, 128, 75, 23);
		lbl_errLab.setBounds		(128, 12, 186, 14);
		txtF_nom.setBounds			(10, 43, 130, 20);
		txtF_pre.setBounds			(10, 101, 130, 20);
		txtF_adresse.setBounds		(10, 202, 130, 40);
		

		// Add
		contentPane.add(lblInscription);
		contentPane.add(lblNom);
		contentPane.add(lblPre);
		contentPane.add(lblDateNaiss);
		contentPane.add(lblAdresse);
		contentPane.add(lblAdresseFact);
		contentPane.add(rdbtnH);
		contentPane.add(rdbtnF);
		contentPane.add(lbl_errLab);
		contentPane.add(txtF_nom);
		contentPane.add(txtF_pre);
		contentPane.add(txtF_adresse);


		// Set columns
		txtF_nom.setColumns(10);
		txtF_pre.setColumns(10);
		txtF_adresse.setColumns(10);


		// Datepicker
		SqlDateModel model = new SqlDateModel();
		Properties p = new Properties();
		p.put("text.today", "Today");
		p.put("text.month", "Month");
		p.put("text.year", "Year");
		JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
		JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
		datePicker.getJFormattedTextField().setToolTipText("Date de naissance");

		datePicker.setBounds(10, 146, 130, 23);
		contentPane.add(datePicker);


		rdbtnH.setSelected(true);

		// Action sur les boutons/
		rdbtnH.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				rdbtnH.setSelected(true);
				sexe = "H";
				rdbtnF.setSelected(false);
			}
		});

		rdbtnF.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				rdbtnH.setSelected(false);
				sexe = "F";
				rdbtnF.setSelected(true);
			}
		});

		JButton btn_inscrip = new JButton("S'enregistrer");

		btn_inscrip.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
				try {

					//Utilisateur u = UtilisateurDao.verifPseudoMdp(txtNomDutilisateur.getText(), pwdPassword.getText());
					//Date dt = new Date(10, 10, 2016);
					//java.sql.Date selectedDate = dt;//(java.sql.Date) datePicker.getModel().getValue();
					String dateNaissance = datePicker.getJFormattedTextField().getText();
					DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
					java.util.Date ud = df.parse(dateNaissance);
					java.sql.Date sd = new java.sql.Date(ud.getTime());

					if(rdbtnClient.isSelected()){
						DAO<Client> ClientDao = adf.getClientDAO();
						numUtilisateur = ClientDao.create(new Client(-1, txtF_nom.getText(), txtF_pre.getText(), txtF_adresse.getText(), sexe, sd,
								txtF_userName.getText(), txtF_mdp.getText(), 2, txtF_adresseFact.getText()));
						if (numUtilisateur != -1){
							// Afficher la fenetre client
							setVisible(false); //you can't see me!
							//dispose(); //Destroy the JFrame object
							F_Client frame = new F_Client(numUtilisateur);
							frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
							frame.setVisible(true);
						}
						else { lbl_errLab.setText("Verifiez vos donnees");}
					}
					else {
						DAO<Moniteur> MoniteurDao = adf.getMoniteurDAO();

						if(chkb_snow.isSelected()) 		listAccreditation.add(new Accreditation("Snowboard"));
						if(chkb_skiAlpin.isSelected())	listAccreditation.add(new Accreditation("Ski"));
						if(chkb_skiFond.isSelected())	listAccreditation.add(new Accreditation("Ski de fond"));
						if(chkb_telemark.isSelected())	listAccreditation.add(new Accreditation("Telemark"));
						if(chkb_jeune.isSelected())		listAccreditation.add(new Accreditation("Jeune"));
						if(chkb_adulte.isSelected())	listAccreditation.add(new Accreditation("Adulte"));
						numUtilisateur = MoniteurDao.create(new Moniteur(-1, txtF_nom.getText(), txtF_pre.getText(), txtF_adresse.getText(), sexe,
								sd, txtF_userName.getText(), txtF_mdp.getText(), 1, listAccreditation));
						if (numUtilisateur != -1){
							setVisible(false); //you can't see me!
							//dispose(); //Destroy the JFrame object
							F_Moniteur frame = new F_Moniteur();
							frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
							frame.setVisible(true);
						}
						else { lbl_errLab.setText("Verifiez vos donnees");}

					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					lbl_errLab.setText("Verifiez vos donnees");
					e.printStackTrace();
				}
			}
		});
		btn_inscrip.setBounds(159, 302, 155, 23);
		contentPane.add(btn_inscrip);

		JButton btn_retour = new JButton("Retour");
		btn_retour.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				setVisible(false);
				F_Connexion frame = new F_Connexion();
				frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
				frame.setVisible(true);
			}
		});
		btn_retour.setBounds(5, 5, 424, 236);
		contentPane.add(btn_retour);

		lblAdresseFact.setVisible(true);
		txtF_adresseFact.setVisible(true);

	}

	public class DateLabelFormatter extends AbstractFormatter {

		private String datePattern = "dd-MM-yyyy";
		private SimpleDateFormat dateFormatter = new SimpleDateFormat(datePattern);

		@Override
		public Object stringToValue(String text) throws ParseException {
			return dateFormatter.parseObject(text);
		}

		@Override
		public String valueToString(Object value) throws ParseException {
			if (value != null) {
				Calendar cal = (Calendar) value;
				return dateFormatter.format(cal.getTime());
			}

			return "";
		}
	}
}
