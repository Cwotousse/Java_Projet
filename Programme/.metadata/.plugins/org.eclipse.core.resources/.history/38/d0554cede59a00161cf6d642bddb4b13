package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import POJO.Utilisateur;
public class UtilisateurDAO extends DAO<Utilisateur> {
	public UtilisateurDAO(Connection conn) {
		super(conn);
	}

	public boolean create(Utilisateur obj) { 
		try
		{
		String requete = "INSERT INTO Personne (nom, prenom, adresse, dateNaissance, sexe) VALUES (?,?,?,?,?)";
		PreparedStatement pst = connect.prepareStatement(requete);

		pst.setString(1, obj.getNom());
		pst.setString(2, obj.getPre());
		pst.setString(3, obj.getAdresse());
		pst.setDate(4, obj.getDateNaissance());
		pst.setString(5, obj.getSexe());

		pst.executeUpdate();
		pst.close();

		//on l'utilise pour ajouter les données dans la table Utilisateur
		String requete2 = "INSERT INTO Utilisateur (pseudo, mdp, typeUtilisateur) VALUES (?,?,?)";
		PreparedStatement pst2 = connect.prepareStatement(requete2);

		//pst2.setInt(1, numUtilisateur);     //L'id qui lie la table moniteur a la table personne
		pst2.setString(1, obj.getPseudo());
		pst2.setString(2, obj.getMdp());
		pst2.setInt(3, obj.getTypeUtilisateur());

		pst2.executeUpdate();
		pst2.close();

		//on l'utilise pour ajouter les données dans la table Moniteur
		String requete3 = "INSERT INTO Moniteur (anneeDexp) VALUES (?)";
		PreparedStatement pst3 = connect.prepareStatement(requete3);

		//pst3.setInt(1, numMoniteur);     //L'id qui lie la table moniteur a la table utilisateur
		pst3.setInt(1, 0); // obj.getAnneeExp()
		pst3.executeUpdate();
		pst3.close();
		
		// On lui ajoute les accréditations
		String sql = "SELECT numMoniteur from Moniteur ORDER BY numMoniteur DESC LIMIT 1";
		pst = this.connect.prepareStatement(sql);
		ResultSet rs = pst.executeQuery();
		int numMoniteur = -1 ;
		while (rs.next()) numMoniteur = rs.getInt(1); // On a l'id du moniteur
		
		
		for(int i = 0; i < obj.getAccrediList().size(); i++){
			String sqlAccred = "SELECT numAccreditation from Accreditation WHERE nomAccreditation = ? ";
			pst = this.connect.prepareStatement(sqlAccred);
			pst.setString(1, obj.getAccrediList().get(i).toString()); // Nom de l'accréditation
			ResultSet rsAccred = pst.executeQuery();
			int numAccred = -1 ;
			while (rsAccred.next()) numAccred = rsAccred.getInt(1); // On a l'id du moniteur
			
			String requete4 = "INSERT INTO LigneAccreditation (numMoniteur, numAccreditation, dateAccreditation) VALUES (?,?,?)";
			PreparedStatement pst4 = connect.prepareStatement(requete4);

			//pst2.setInt(1, numUtilisateur);     //L'id qui lie la table moniteur a la table personne
			pst4.setInt(1, numMoniteur);
			pst4.setInt(2, numAccred);
			pst4.setDate(3, now);

			pst4.executeUpdate();
			pst4.close();
		}
		System.out.println("Ajout d'un moniteur effectue");
		return true;
	} 
	catch (SQLException e) {
		System.out.println(obj.getDateNaissance());
		System.out.println(e.getMessage());
		e.printStackTrace();
		return false;
	}

	public boolean delete(Utilisateur obj) {
		return false;
	}

	public boolean update(Utilisateur obj) {
		return false;
	}

	// On cherche un élève grâce à son id
	public Utilisateur find(int id) {return null; } /*{
		Utilisateur utilisateur = new Utilisateur();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM utilisateur WHERE numUtilisateur = ?";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				utilisateur.setPseudo(rs.getString("pseudo"));
				utilisateur.setMdp(rs.getString("mdp"));
				utilisateur.setTypeUtilisateur(rs.getInt("typeUtilisateur"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return utilisateur;
	}*/
	
	public  Utilisateur verifPseudoMdp(String pseu, String pwd){ return null; } /*{
		Utilisateur utilisateur = new Utilisateur();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM utilisateur WHERE pseudo = ? AND mdp = ? ";
			pst = this.connect.prepareStatement(sql);
			pst.setString(1, pseu);
			pst.setString(2, pwd);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				utilisateur.setPseudo(rs.getString("pseudo"));
				utilisateur.setMdp(rs.getString("mdp"));
				utilisateur.setTypeUtilisateur(rs.getInt("typeUtilisateur"));
				utilisateur.setNumUtilisateur(rs.getInt("numUtilisateur"));
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return utilisateur;
	}*/

	public  ArrayList<Utilisateur> getList() { return null;}  //{
		/*Utilisateur utilisateur;
		ArrayList<Utilisateur> liste = new ArrayList<Utilisateur>();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM utilisateur";
			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				utilisateur = new Utilisateur();
				utilisateur.setPseudo(rs.getString("pseudo"));
				utilisateur.setMdp(rs.getString("mdp"));
				utilisateur.setTypeUtilisateur(rs.getInt("typeUtilisateur"));
				liste.add(utilisateur);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return liste;
	}*/
}
