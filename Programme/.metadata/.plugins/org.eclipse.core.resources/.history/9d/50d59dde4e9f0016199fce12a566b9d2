package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import POJO.Cours;
import POJO.Personne;
import POJO.Utilisateur;

public class CoursDAO extends DAO<Cours> {
	public CoursDAO(Connection conn) {
		super(conn);
	}

	@Override
	public int create(Cours obj) {
		try {
			
			int numPersonne = -1;
			Personne P = new Personne(-1,obj.getNom(), obj.getPre(), obj.getAdresse(), obj.getSexe(), obj.getDateNaissance());
			numPersonne = P.createPersonne();
			if (numPersonne != -1){
				
				System.out.println("Cours Dao -> " + numPersonne);
				Utilisateur U = new Utilisateur(numPersonne, obj.getPseudo(), obj.getMdp(), obj.getTypeUtilisateur());
				if(U.createUtilisateur()!= -1){
					/*String sql0 = "SELECT numPersonne FROM Personne WHERE numPersonne";
					PreparedStatement pst0 = this.connect.prepareStatement(sql0);
					ResultSet rs0 = pst0.executeQuery();
					int numUtilisateur = -1 ;
					while (rs0.next()) numUtilisateur = rs0.getInt(1); // On a l'id de l'utilisateur*/

					String requete5 = "INSERT INTO Cours (adresseFacturation, numCours) VALUES (?,?)";
					PreparedStatement pst5 = connect.prepareStatement(requete5);

					pst5.setString(1, obj.getAdresseFacturation());
					pst5.setInt(2, numPersonne);
					pst5.executeUpdate();
					pst5.close();
					System.out.println("Ajout d'un cours effectue");
					return numPersonne;
				}
				else { 
					P.deletePersonne();
					return -1;
				} // utilisateur
			}
			else { return -1; } // personne
		} 
		catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			return -1;
		}

	}

	public boolean delete(Cours obj) { return false; }

	public boolean update(Cours obj) { return false; }

	// On cherche une Cours grâce à son id
	public Cours find(int id) {
		Cours cours = new Cours();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Cours INNER JOIN Utilisateur ON Cours.numCours = Utilisateur.numUtilisateur "
					+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur WHERE numCours = ?;";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet result = pst.executeQuery();
			while (result.next()) {
				cours = new Cours(result.getInt("numCours"), result.getString("nomSport"), result.getInt("prix"),
						result.getInt("minEleve"),  result.getInt("maxEleve"),  result.getString("periodeCours"));
			}
			return cours;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		} finally {
			if (pst != null) {
				try {
					pst.close();
				}
				catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public ArrayList<Cours> getList() {
		Cours cours = null;
		ArrayList<Cours> liste = new ArrayList<Cours>();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Cours";
			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				cours.setNumUtilisateur(rs.getInt("numUtilisateur"));
				cours.setNumCours(rs.getInt("numCours"));
				liste.add(cours);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}
}
