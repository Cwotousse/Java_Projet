package FENETRE;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import DAO.AbstractDAOFactory;
import DAO.DAO;
import DAO.DisponibiliteMoniteurDAO;
import POJO.DisponibiliteMoniteur;
import POJO.Reservation;
import POJO.Semaine;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.awt.Color;
import java.awt.Component;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;

public class F_Moniteur extends JFrame {
	static int numMoniteur = -1;
	AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
	DAO<DisponibiliteMoniteur> DisponibiliteMoniteurDAO = adf.getDisponibiliteMoniteurDAO();
	DAO<Semaine> SemaineDAO = adf.getSemaineDAO();

	private JPanel contentPane;
	private final JLabel lblMoniteur = new JLabel("Moniteur");
	//JTable table = new JTable(); 
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					
					Button bc = new Button();
					bc.setVisible(true);
					F_Moniteur frame = new F_Moniteur(109);
					frame.setVisible(true);
				}
				catch (Exception e) { e.printStackTrace(); }
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public F_Moniteur(int idMoniteur) {
		numMoniteur = idMoniteur;
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 513, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		lblMoniteur.setFont(new Font("Yu Gothic UI", Font.PLAIN, 16));
		lblMoniteur.setBounds(10, 11, 73, 36);
		contentPane.add(lblMoniteur);

		JLabel errMsg = new JLabel("");
		errMsg.setForeground(Color.RED);
		errMsg.setBounds(10, 11, 46, 14);
		contentPane.add(errMsg);

		JSeparator separator = new JSeparator();
		separator.setBounds(10, 45, 73, 2);
		contentPane.add(separator);

		JButton btnDeco = new JButton("Se d\u00E9connecter");
		btnDeco.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				setVisible(false);
				F_Connexion frame = new F_Connexion();
				frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
				frame.setVisible(true);
			}
		});
		btnDeco.setBounds(10, 92, 117, 23);
		contentPane.add(btnDeco);

		JButton btn_cours = new JButton("Mes cours");
		btn_cours.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				// Affiche F_AfficherRDV
				setVisible(false);
				F_AfficherRDV frame = new F_AfficherRDV(idMoniteur);
				frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
				frame.setVisible(true);
			}
		});
		btn_cours.setBounds(10, 58, 117, 23);
		contentPane.add(btn_cours);

		afficherTable();
		
		/*ArrayList<DisponibiliteMoniteur> listDispo = DisponibiliteMoniteurDAO.getMyList(numMoniteur);
		ArrayList<Semaine> listSemaine = SemaineDAO.getList();
		//headers for the table
		String[] columns = new String[] { "Disponible","Période", "Modifier" };

		//actual data for the table in a 2d array
		Object[][] data  = new Object[listDispo.size()][3];

		for (int i = 0; i < listDispo.size(); i++) {
			data[i][0] = listDispo.get(i).getDisponible();
			data[i][1] = listSemaine.get(i).getDateDebut() + " à " + listSemaine.get(i).getDateFin();
			data[i][2] =  listSemaine.get(i).getNumSemaine() + ", Changer "; // ajout du bouton
		}
		
		JTable table = new JTable(data, columns);
		// Set custom renderer to team column
		table.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer());
		
		//set custom editor to team colum
		table.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JTextField()));
		
		 // Scroolpane, set size, set close operation
		JScrollPane pane = new JScrollPane(table);
		pane.setBounds(156, 18, 331, 232);
		getContentPane().add(pane);
		setDefaultCloseOperation(EXIT_ON_CLOSE);*/
	}
	
	public  void afficherTable(){
		ArrayList<DisponibiliteMoniteur> listDispo = DisponibiliteMoniteurDAO.getMyList(numMoniteur);
		ArrayList<Semaine> listSemaine = SemaineDAO.getList();
		//headers for the table
		String[] columns = new String[] { "Disponible","Période", "Modifier" };

		//actual data for the table in a 2d array
		Object[][] data  = new Object[listDispo.size()][3];

		for (int i = 0; i < listDispo.size(); i++) {
			data[i][0] = listDispo.get(i).getDisponible();
			data[i][1] = listSemaine.get(i).getDateDebut() + " à " + listSemaine.get(i).getDateFin();
			data[i][2] =  listSemaine.get(i).getNumSemaine() + ", Changer "; // ajout du bouton
		}
		DefaultTableModel model = new DefaultTableModel(data, columns);
		JTable table = new JTable( model );
		
		
		
		ButtonColumn buttonColumn = new ButtonColumn(table, changerValeur, 2);
		//Object obj = buttonColumn.getCellEditorValue();
		//System.out.println(obj.toString());
		
		// Set custom renderer to team column
		//table.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer());
		
		//set custom editor to team colum
		//table.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JTextField()));
		
		 // Scroolpane, set size, set close operation
		JScrollPane pane = new JScrollPane(table);
		pane.setBounds(156, 18, 331, 232);
		getContentPane().add(pane);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
	
	final Action changerValeur = new AbstractAction() 
	{
	    @Override
	    public void actionPerformed(ActionEvent e) 
	    {
	    	JTable mytableClicked = (JTable)e.getSource();
	        String[] parts = mytableClicked.getModel().getValueAt(mytableClicked.getSelectedRow(), mytableClicked.getSelectedColumn()).toString().split(",");
	        DisponibiliteMoniteurDAO.changeDispoSelonIdSemaine(Integer.parseInt(parts[0]), F_Moniteur.numMoniteur);
			JOptionPane.showMessageDialog(null, "Disponibilité modifiée!");
			//afficherTable();
	    }
	};
	/*class ButtonRenderer extends JButton implements TableCellRenderer {      
		// Constructeur
		public ButtonRenderer(){
			// Set button properties
			setOpaque(true);
		}

		@Override
		public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
			setText((obj==null) ? "":obj.toString());
			return this;  
		}
	}

	// Button editor class
	class ButtonEditor extends DefaultCellEditor{
		protected JButton btn;
		private String lbl;
		private boolean clicked;

		public ButtonEditor(JTextField txt) {
			super(txt);

			btn = new JButton();
			btn.setOpaque(true);

			// When button is clicked
			btn.addActionListener(new ActionListener(){
				// Classe anonyme
				@Override public void actionPerformed(ActionEvent e){ fireEditingStopped(); }
				
			});
		}
		
		// Override a couple of methods
		@Override
		public Component getTableCellEditorComponent(JTable table, Object obj, boolean selected, int row, int col) {
			// TODO Auto-generated method stub
			
			// SET TEXT TO BUTTON
			lbl = (obj==null) ? "" : obj.toString();
			btn.setText(lbl); 
			clicked = true;
			return btn;
		}
		
		// If button cell value changes, if clicked that is
		@Override
		public Object getCellEditorValue() {
			AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
			DAO<DisponibiliteMoniteur> DisponibiliteMoniteurDAO = adf.getDisponibiliteMoniteurDAO();
			// TODO Auto-generated method stub
			if(clicked){
				
				// show us some message
				String[] parts = lbl.split(",");
				DisponibiliteMoniteurDAO.changeDispoSelonIdSemaine(Integer.parseInt(parts[0]), F_Moniteur.numMoniteur);
				JOptionPane.showMessageDialog(btn, "Disponibilité modifiée!");
				
				table = addTable(table);
			}
			// Set it to false now that is clicked
			clicked = false;
			return new String (lbl);
		}
		
		public boolean getCellEditing(){
			// Set clicked to false first
			clicked = false;
			return super.stopCellEditing();
		}
		
		@Override
		protected void fireEditingStopped() {
			// TODO Auto-generated method stub
			super.fireEditingStopped();
		}
	}*/
}



class ButtonColumn extends AbstractCellEditor
implements TableCellRenderer, TableCellEditor, ActionListener, MouseListener
{
	private JTable table;
	private Action action;
	private int mnemonic;
	private Border originalBorder;
	private Border focusBorder;

	private JButton renderButton;
	private JButton editButton;
	private Object editorValue;
	private boolean isButtonColumnEditor;

	/**
	 *  Create the ButtonColumn to be used as a renderer and editor. The
	 *  renderer and editor will automatically be installed on the TableColumn
	 *  of the specified column.
	 *
	 *  @param table the table containing the button renderer/editor
	 *  @param action the Action to be invoked when the button is invoked
	 *  @param column the column to which the button renderer/editor is added
	 */
	public ButtonColumn(JTable table, Action action, int column)
	{
		this.table = table;
		this.action = action;

		renderButton = new JButton();
		editButton = new JButton();
		editButton.setFocusPainted( false );
		editButton.addActionListener( this );
		originalBorder = editButton.getBorder();
		setFocusBorder( new LineBorder(Color.BLUE) );

		TableColumnModel columnModel = table.getColumnModel();
		columnModel.getColumn(column).setCellRenderer( this );
		columnModel.getColumn(column).setCellEditor( this );
		table.addMouseListener( this );
	}


	/**
	 *  Get foreground color of the button when the cell has focus
	 *
	 *  @return the foreground color
	 */
	public Border getFocusBorder()
	{
		return focusBorder;
	}

	/**
	 *  The foreground color of the button when the cell has focus
	 *
	 *  @param focusBorder the foreground color
	 */
	public void setFocusBorder(Border focusBorder)
	{
		this.focusBorder = focusBorder;
		editButton.setBorder( focusBorder );
	}

	public int getMnemonic()
	{
		return mnemonic;
	}

	/**
	 *  The mnemonic to activate the button when the cell has focus
	 *
	 *  @param mnemonic the mnemonic
	 */
	public void setMnemonic(int mnemonic)
	{
		this.mnemonic = mnemonic;
		renderButton.setMnemonic(mnemonic);
		editButton.setMnemonic(mnemonic);
	}

	@Override
	public Component getTableCellEditorComponent(
			JTable table, Object value, boolean isSelected, int row, int column)
	{
		if (value == null)
		{
			editButton.setText( "" );
			editButton.setIcon( null );
		}
		else if (value instanceof Icon)
		{
			editButton.setText( "" );
			editButton.setIcon( (Icon)value );
		}
		else
		{
			editButton.setText( value.toString() );
			editButton.setIcon( null );
		}

		this.editorValue = value;
		return editButton;
	}

	@Override
	public Object getCellEditorValue()
	{
		return editorValue;
	}

	//
	//  Implement TableCellRenderer interface
	//
	public Component getTableCellRendererComponent(
			JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
	{
		if (isSelected)
		{
			renderButton.setForeground(table.getSelectionForeground());
			renderButton.setBackground(table.getSelectionBackground());
		}
		else
		{
			renderButton.setForeground(table.getForeground());
			renderButton.setBackground(UIManager.getColor("Button.background"));
		}

		if (hasFocus)
		{
			renderButton.setBorder( focusBorder );
		}
		else
		{
			renderButton.setBorder( originalBorder );
		}

		//			renderButton.setText( (value == null) ? "" : value.toString() );
		if (value == null)
		{
			renderButton.setText( "" );
			renderButton.setIcon( null );
		}
		else if (value instanceof Icon)
		{
			renderButton.setText( "" );
			renderButton.setIcon( (Icon)value );
		}
		else
		{
			renderButton.setText( value.toString() );
			renderButton.setIcon( null );
		}

		return renderButton;
	}

	//
	//  Implement ActionListener interface
	//
	/*
	 *	The button has been pressed. Stop editing and invoke the custom Action
	 */
	public void actionPerformed(ActionEvent e)
	{
		int row = table.convertRowIndexToModel( table.getEditingRow() );
		fireEditingStopped();

		//  Invoke the Action

		ActionEvent event = new ActionEvent(
				table,
				ActionEvent.ACTION_PERFORMED,
				"" + row);
		action.actionPerformed(event);
	}

	//
	//  Implement MouseListener interface
	//
	/*
	 *  When the mouse is pressed the editor is invoked. If you then then drag
	 *  the mouse to another cell before releasing it, the editor is still
	 *  active. Make sure editing is stopped when the mouse is released.
	 */
	public void mousePressed(MouseEvent e)
	{
		if (table.isEditing()
				&&  table.getCellEditor() == this)
			isButtonColumnEditor = true;
	}

	public void mouseReleased(MouseEvent e)
	{
		if (isButtonColumnEditor
				&&  table.isEditing())
			table.getCellEditor().stopCellEditing();

		isButtonColumnEditor = false;
	}

	public void mouseClicked(MouseEvent e) {}
	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
}
