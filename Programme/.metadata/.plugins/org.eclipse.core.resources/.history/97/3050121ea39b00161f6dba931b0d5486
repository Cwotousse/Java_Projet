package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import POJO.Eleve;
import POJO.Personne;
import POJO.Utilisateur;

public class EleveDAO extends DAO<Eleve> {
	public EleveDAO(Connection conn) {
		super(conn);
	}

	public boolean create(Eleve obj) {
		try {
			AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
			DAO<Personne> PersonneDao = adf.getPersonneDAO();
			if (PersonneDao.create(new Personne(obj.getNom(), obj.getPre(), obj.getAdresse(), obj.getSexe(), obj.getDateNaissance()))){

				DAO<Utilisateur> UtilisateurDao = adf.getUtilisateurDAO();
				if(UtilisateurDao.create(new Utilisateur(obj.getPseudo(), obj.getMdp(), obj.getTypeUtilisateur()))){
					String sql0 = "SELECT MAX(numUtilisateur) from Utilisateur";
					PreparedStatement pst0 = this.connect.prepareStatement(sql0);
					ResultSet rs0 = pst0.executeQuery();
					int numUtilisateur = -1 ;
					while (rs0.next()) numUtilisateur = rs0.getInt(1); // On a l'id de l'utilisateur
					
					String requete5 = "INSERT INTO Eleve (adresseFacturation, numUtilisateur) VALUES (?,?)";
					PreparedStatement pst5 = connect.prepareStatement(requete5);

					pst5.setString(1, obj.getAdresseFacturation());
					pst5.setInt(2, numUtilisateur);
					pst5.executeUpdate();
					pst5.close();
					System.out.println("Ajout d'un eleve effectue");
					return true;
				} else { 
					PersonneDao.delete(null);
					return false;
					} // utilisateur
			} else { return false; } // personne
		} 
		catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			return false;
		}
 
	}

	public boolean delete(Eleve obj) {
		return false;
	}

	public boolean update(Eleve obj) {
		return false;
	}

	// On cherche une Eleve grâce à son id
	public Eleve find(int id) {
		Eleve eleve = new Eleve();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Eleve WHERE numEleve = ?";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				eleve.setNumUtilisateur(rs.getInt("numUtilisateur"));
				eleve.setNumEleve(rs.getInt("numEleve"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return eleve;
	}



	public ArrayList<Eleve> getList() {
		Eleve eleve = null;
		ArrayList<Eleve> liste = new ArrayList<Eleve>();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Eleve";
			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				eleve.setNumUtilisateur(rs.getInt("numUtilisateur"));
				eleve.setNumEleve(rs.getInt("numEleve"));
				liste.add(eleve);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return liste;
	}

	@Override
	public  int verifPseudoMdp(Utilisateur obj){
		// TODO Auto-generated method stub
		return -1;
	}
}