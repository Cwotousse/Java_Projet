package DAO;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;

import POJO.Accreditation;
import POJO.Client;
import POJO.Cours;
import POJO.CoursCollectif;
import POJO.CoursParticulier;
import POJO.Eleve;
import POJO.Moniteur;
import POJO.Reservation;
import POJO.Semaine;


public class ReservationDAO extends DAO<Reservation> {

	public ReservationDAO(Connection conn) {
		super(conn);
	}

	public int create(Reservation obj) { 
		try
		{
			String insertReservation 	= "INSERT INTO Reservation (heureDebut, heurefin) VALUES (?,?)";
			PreparedStatement pst_Res = connect.prepareStatement(insertReservation);
			pst_Res.setInt(1, obj.getHeureDebut());
			pst_Res.setInt(2, obj.getHeureFin());
			pst_Res.executeUpdate();
			pst_Res.close();

			PreparedStatement pst_numReserv;
			String selectNumReserv = "SELECT MAX(numReservation) FROM Reservation";
			pst_numReserv = this.connect.prepareStatement(selectNumReserv);
			ResultSet rs = pst_numReserv.executeQuery();
			while (rs.next()) { obj.setNumReservation(rs.getInt(1)); }
			System.out.println("ReservationDao -> " + obj.getNumReservation());

			String insertReservCli 		= "INSERT INTO ReservationClient 	(numReservation, numClient) VALUES (?,?)";
			String insertReservEleve 	= "INSERT INTO ReservationEleve 	(numReservation, numEleve) 	VALUES (?,?)";
			String insertCoursMoniteur 	= "INSERT INTO CoursMoniteur 		(numCours, numMoniteur) 	VALUES (?,?)";
			String insertCoursSemaine 	= "INSERT INTO CoursSemaine 		(numCours, numSemaine)	 	VALUES (?,?)";
			String insertReservCours 	= "INSERT INTO ReservationCours 	(numReservation, numCours) 	VALUES (?,?)";


			PreparedStatement pst_Res_Cli = connect.prepareStatement(insertReservCli);
			PreparedStatement pst_Res_Ele = connect.prepareStatement(insertReservEleve);
			PreparedStatement pst_Cou_Mon = connect.prepareStatement(insertCoursMoniteur);
			PreparedStatement pst_Cou_Sem = connect.prepareStatement(insertCoursSemaine);
			PreparedStatement pst_Res_Cou = connect.prepareStatement(insertReservCours);


			pst_Res_Cli.setInt(1, obj.getNumReservation());
			pst_Res_Cli.setInt(2, obj.getClient().getNumPersonne());

			pst_Res_Ele.setInt(1, obj.getNumReservation());
			pst_Res_Ele.setInt(2, obj.getEleve().getNumPersonne());

			pst_Cou_Mon.setInt(1, obj.getCours().getNumCours());
			pst_Cou_Mon.setInt(2, obj.getMoniteur().getNumPersonne());

			pst_Cou_Sem.setInt(1, obj.getCours().getNumCours());
			pst_Cou_Sem.setInt(2, obj.getSemaine().getNumSemaine());

			pst_Res_Cou.setInt(1, obj.getNumReservation());
			pst_Res_Cou.setInt(2, obj.getCours().getNumCours());


			pst_Res_Cli.executeUpdate();
			pst_Res_Ele.executeUpdate();
			pst_Cou_Mon.executeUpdate();
			pst_Cou_Sem.executeUpdate();
			pst_Res_Cou.executeUpdate();


			pst_Res_Cli.close();
			pst_Res_Ele.close();
			pst_Cou_Mon.close();
			pst_Cou_Sem.close();
			pst_Res_Cou.close();

			return obj.getNumReservation();
		}

		catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			return -1;
		}
	}
	public boolean delete(Reservation obj) {
		return false;
	}

	public boolean update(Reservation obj) {
		return false;
	}

	// On cherche un élève grâce à son id
	public Reservation find(int id) {
		PreparedStatement pst = null;
		try {
			Semaine S 	= new Semaine();
			Cours C 	= new Cours();
			Eleve E 	= new Eleve();
			Client Cli 	= new Client();
			Moniteur M 	= new Moniteur();

			String sql = "SELECT * FROM Cours "
					+ "INNER JOIN CoursMoniteur ON CoursMoniteur.numCours = Cours.numCours "
					+ "INNER JOIN CoursSemaine ON CoursSemaine.numCours = Cours.numCours "
					//+ "INNER JOIN Personne On Personne.numPersonne = CoursMoniteur.numMoniteur "
					+ "INNER JOIN ReservationCours ON ReservationCours.numCours = Cours.numCours "
					+ "INNER JOIN Reservation ON Reservation.numReservation = ReservationCours.numReservation "
					+ "INNER JOIN ReservationClient ON ReservationClient.numReservation = Reservation.numReservation "
					+ "INNER JOIN ReservationEleve ON ReservationEleve.numReservation = Reservation.numReservation "
					+ "WHERE ReservationClient.numClient = ? ;";

			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				ArrayList<Accreditation> listeAccred = new ArrayList<Accreditation>();

				String selectSemaine 	= "SELECT * FROM Semaine	WHERE numSemaine 	= ? ";
				String selectCours 		= "SELECT * FROM Cours 		WHERE numCours 		= ? ";
				String selectEleve 		= "SELECT * FROM Eleve "
						+ "INNER JOIN Personne ON Personne.numPersonne = Eleve.numEleve "
						+ "WHERE numPersonne =  ? ";
				String selectClient 	= "SELECT * FROM Client 	INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Client.numClient "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ?  ";
				String selectMoniteur 	= "SELECT * FROM Moniteur	"
						+ "INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Moniteur.numMoniteur "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ? ";
				String selectAccredMoni = "Select * from Accreditation INNER JOIN LigneAccreditation "
						+ "ON Accreditation.numAccreditation = LigneAccreditation.numAccreditation WHERE numMoniteur = ?;";

				PreparedStatement pst_Sem = connect.prepareStatement(selectSemaine);
				PreparedStatement pst_Cou = connect.prepareStatement(selectCours);
				PreparedStatement pst_Ele = connect.prepareStatement(selectEleve);
				PreparedStatement pst_Cli = connect.prepareStatement(selectClient);
				PreparedStatement pst_Mon = connect.prepareStatement(selectMoniteur);
				PreparedStatement pst_Acc = connect.prepareStatement(selectAccredMoni);

				pst_Sem.setInt(1, rs.getInt("numSemaine"));
				pst_Cou.setInt(1, rs.getInt("numCours"));
				pst_Ele.setInt(1, rs.getInt("numEleve"));
				pst_Cli.setInt(1, rs.getInt("numClient"));
				pst_Mon.setInt(1, rs.getInt("numMoniteur"));
				pst_Acc.setInt(1, rs.getInt("numMoniteur"));

				ResultSet rs_Sem = pst_Sem.executeQuery();
				ResultSet rs_Cou = pst_Cou.executeQuery();
				ResultSet rs_Ele = pst_Ele.executeQuery();
				ResultSet rs_Cli = pst_Cli.executeQuery();
				ResultSet rs_Acc = pst_Acc.executeQuery();
				ResultSet rs_Mon = pst_Mon.executeQuery();

				while (rs_Sem.next()) { S = new Semaine(rs_Sem.getInt("numSemaine"), rs_Sem.getBoolean("CongeScolaireOuNon"), rs_Sem.getDate("dateDebut"), rs_Sem.getDate("dateFin"), rs_Sem.getInt("numSemaineDansAnnee")); }
				while (rs_Cou.next()) { C = new Cours(rs_Cou.getInt("numCours"), rs_Cou.getString("nomSport"), rs_Cou.getInt("prix"), rs_Cou.getInt("minEleve"), 
						rs_Cou.getInt("maxEleve"), rs_Cou.getString("periodeCours")); }
				while (rs_Ele.next()) { E = new Eleve(rs_Ele.getInt("numEleve"), rs_Ele.getString("nom"), rs_Ele.getString("prenom"),
						rs_Ele.getString("adresse"), rs_Ele.getString("sexe"), rs_Ele.getDate("dateNaissance")); }
				while (rs_Cli.next()) { Cli = new Client(rs_Cli.getInt("numPersonne"), rs_Cli.getString("nom"), rs_Cli.getString("prenom"),
						rs_Cli.getString("adresse"), rs_Cli.getString("sexe"), rs_Cli.getDate("dateNaissance"), rs_Cli.getString("pseudo"),
						rs_Cli.getString("mdp"), rs_Cli.getInt("typeUtilisateur"), rs_Cli.getString("adresseFacturation")); }
				while(rs_Acc.next()){ listeAccred.add(new Accreditation(rs_Acc.getString("nomAccreditation"))); }
				while (rs_Mon.next()) { M = new Moniteur(rs_Mon.getInt("numMoniteur"), rs_Mon.getString("nom"), rs_Mon.getString("prenom"),
						rs_Mon.getString("adresse"), rs_Mon.getString("sexe"), rs_Mon.getDate("dateNaissance"), rs_Mon.getString("pseudo"), rs_Mon.getString("mdp"),
						rs_Mon.getInt("typeUtilisateur"), listeAccred); }

				Reservation reservation = new Reservation(rs.getInt("heureDebut"), rs.getInt("heureFin"), rs.getInt("numReservation"), S, C, E, Cli, M);
				return reservation;
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return null;
	}

	public  ArrayList<Reservation> getList() {
		ArrayList<Reservation> liste = new ArrayList<Reservation>();

		PreparedStatement pst = null;
		try {
			Semaine S 	= new Semaine();
			Cours C 	= new Cours();
			Eleve E 	= new Eleve();
			Client Cli 	= new Client();
			Moniteur M 	= new Moniteur();

			String sql = "SELECT * FROM Cours "
					+ "INNER JOIN CoursMoniteur ON CoursMoniteur.numCours = Cours.numCours "
					+ "INNER JOIN CoursSemaine ON CoursSemaine.numCours = Cours.numCours "
					//+ "INNER JOIN Personne On Personne.numPersonne = CoursMoniteur.numMoniteur "
					+ "INNER JOIN ReservationCours ON ReservationCours.numCours = Cours.numCours "
					+ "INNER JOIN Reservation ON Reservation.numReservation = ReservationCours.numReservation "
					+ "INNER JOIN ReservationClient ON ReservationClient.numReservation = Reservation.numReservation "
					+ "INNER JOIN ReservationEleve ON ReservationEleve.numReservation = Reservation.numReservation;";

			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				ArrayList<Accreditation> listeAccred = new ArrayList<Accreditation>();

				String selectSemaine 	= "SELECT * FROM Semaine	WHERE numSemaine 	= ? ";
				String selectCours 		= "SELECT * FROM Cours 		WHERE numCours 		= ? ";
				String selectEleve 		= "SELECT * FROM Eleve "
						+ "INNER JOIN Personne ON Personne.numPersonne = Eleve.numEleve "
						+ "WHERE numPersonne =  ? ";
				String selectClient 	= "SELECT * FROM Client 	INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Client.numClient "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ?  ";
				String selectMoniteur 	= "SELECT * FROM Moniteur	"
						+ "INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Moniteur.numMoniteur "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ? ";
				String selectAccredMoni = "Select * from Accreditation INNER JOIN LigneAccreditation "
						+ "ON Accreditation.numAccreditation = LigneAccreditation.numAccreditation WHERE numMoniteur = ?;";

				PreparedStatement pst_Sem = connect.prepareStatement(selectSemaine);
				PreparedStatement pst_Cou = connect.prepareStatement(selectCours);
				PreparedStatement pst_Ele = connect.prepareStatement(selectEleve);
				PreparedStatement pst_Cli = connect.prepareStatement(selectClient);
				PreparedStatement pst_Mon = connect.prepareStatement(selectMoniteur);
				PreparedStatement pst_Acc = connect.prepareStatement(selectAccredMoni);

				pst_Sem.setInt(1, rs.getInt("numSemaine"));
				pst_Cou.setInt(1, rs.getInt("numCours"));
				pst_Ele.setInt(1, rs.getInt("numEleve"));
				pst_Cli.setInt(1, rs.getInt("numClient"));
				pst_Mon.setInt(1, rs.getInt("numMoniteur"));
				pst_Acc.setInt(1, rs.getInt("numMoniteur"));

				ResultSet rs_Sem = pst_Sem.executeQuery();
				ResultSet rs_Cou = pst_Cou.executeQuery();
				ResultSet rs_Ele = pst_Ele.executeQuery();
				ResultSet rs_Cli = pst_Cli.executeQuery();
				ResultSet rs_Acc = pst_Acc.executeQuery();
				ResultSet rs_Mon = pst_Mon.executeQuery();

				while (rs_Sem.next()) { S = new Semaine(rs_Sem.getInt("numSemaine"), rs_Sem.getBoolean("CongeScolaireOuNon"), rs_Sem.getDate("dateDebut"), rs_Sem.getDate("dateFin"), rs_Sem.getInt("numSemaineDansAnnee")); }
				while (rs_Cou.next()) { C = new Cours(rs_Cou.getInt("numCours"), rs_Cou.getString("nomSport"), rs_Cou.getInt("prix"), rs_Cou.getInt("minEleve"), 
						rs_Cou.getInt("maxEleve"), rs_Cou.getString("periodeCours")); }
				while (rs_Ele.next()) { E = new Eleve(rs_Ele.getInt("numEleve"), rs_Ele.getString("nom"), rs_Ele.getString("prenom"),
						rs_Ele.getString("adresse"), rs_Ele.getString("sexe"), rs_Ele.getDate("dateNaissance")); }
				while (rs_Cli.next()) { Cli = new Client(rs_Cli.getInt("numPersonne"), rs_Cli.getString("nom"), rs_Cli.getString("prenom"),
						rs_Cli.getString("adresse"), rs_Cli.getString("sexe"), rs_Cli.getDate("dateNaissance"), rs_Cli.getString("pseudo"),
						rs_Cli.getString("mdp"), rs_Cli.getInt("typeUtilisateur"), rs_Cli.getString("adresseFacturation")); }
				while(rs_Acc.next()){ listeAccred.add(new Accreditation(rs_Acc.getString("nomAccreditation"))); }
				while (rs_Mon.next()) { M = new Moniteur(rs_Mon.getInt("numMoniteur"), rs_Mon.getString("nom"), rs_Mon.getString("prenom"),
						rs_Mon.getString("adresse"), rs_Mon.getString("sexe"), rs_Mon.getDate("dateNaissance"), rs_Mon.getString("pseudo"), rs_Mon.getString("mdp"),
						rs_Mon.getInt("typeUtilisateur"), listeAccred); }

				Reservation reservation = new Reservation(rs.getInt("heureDebut"), rs.getInt("heureFin"), rs.getInt("numReservation"), S, C, E, Cli, M);
				liste.add(reservation);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}

	public  ArrayList<Reservation> getMyList(int idPersonne) {
		ArrayList<Reservation> liste = new ArrayList<Reservation>();

		PreparedStatement pst = null;
		try {
			Semaine S 	= new Semaine();
			Cours C 	= new Cours();
			Eleve E 	= new Eleve();
			Client Cli 	= new Client();
			Moniteur M 	= new Moniteur();
			
			String innerTypePersonne = "INNER JOIN Personne On Personne.numPersonne = ReservationClient.numClient ";
			
			// IL FAUT SAVOIR SI LA PERSONNE ENTREE EN PARAM EST UN CLIENT OU UN MONITEUR
			String rechercheMon = "SELECT * FROM Moniteur WHERE numMoniteur = ?";
			//String rechercheCli = "SELECT * FROM Client WHERE numClient = ?";
			
			PreparedStatement pst_Rec_Mon = this.connect.prepareStatement(rechercheMon);
			//PreparedStatement pst_Rec_Cli = this.connect.prepareStatement(rechercheCli);
			
			pst_Rec_Mon.setInt(1, idPersonne);
			//pst_Rec_Cli.setInt(1, idPersonne);
			
			ResultSet res_Rec_Mon = pst_Rec_Mon.executeQuery();
			//ResultSet res_Rec_Cli = pst_Rec_Cli.executeQuery();
			
			if (res_Rec_Mon.isBeforeFirst() ) { innerTypePersonne = "INNER JOIN Personne On Personne.numPersonne = CoursMoniteur.numMoniteur "; } 
			
			String sql = "SELECT * FROM Cours "
					+ "INNER JOIN CoursMoniteur ON CoursMoniteur.numCours = Cours.numCours "
					+ "INNER JOIN CoursSemaine ON CoursSemaine.numCours = Cours.numCours "
					+ "INNER JOIN ReservationCours ON ReservationCours.numCours = Cours.numCours "
					+ "INNER JOIN Reservation ON Reservation.numReservation = ReservationCours.numReservation "
					+ "INNER JOIN ReservationClient ON ReservationClient.numReservation = Reservation.numReservation "
					+ "INNER JOIN ReservationEleve ON ReservationEleve.numReservation = Reservation.numReservation "
					+ innerTypePersonne
					+ "WHERE Personne.numPersonne = ? ;";

			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, idPersonne);
			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				ArrayList<Accreditation> listeAccred = new ArrayList<Accreditation>();

				String selectSemaine 	= "SELECT * FROM Semaine	WHERE numSemaine 	= ? ";
				String selectCours 		= "SELECT * FROM Cours 		WHERE numCours 		= ? ";
				String selectEleve 		= "SELECT * FROM Eleve "
						+ "INNER JOIN Personne ON Personne.numPersonne = Eleve.numEleve "
						+ "WHERE numPersonne =  ? ";
				String selectClient 	= "SELECT * FROM Client 	INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Client.numClient "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ?  ";
				String selectMoniteur 	= "SELECT * FROM Moniteur	"
						+ "INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Moniteur.numMoniteur "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ? ";
				String selectAccredMoni = "Select * from Accreditation INNER JOIN LigneAccreditation "
						+ "ON Accreditation.numAccreditation = LigneAccreditation.numAccreditation WHERE numMoniteur = ?;";

				PreparedStatement pst_Sem = connect.prepareStatement(selectSemaine);
				PreparedStatement pst_Cou = connect.prepareStatement(selectCours);
				PreparedStatement pst_Ele = connect.prepareStatement(selectEleve);
				PreparedStatement pst_Cli = connect.prepareStatement(selectClient);
				PreparedStatement pst_Mon = connect.prepareStatement(selectMoniteur);
				PreparedStatement pst_Acc = connect.prepareStatement(selectAccredMoni);

				pst_Sem.setInt(1, rs.getInt("numSemaine"));
				pst_Cou.setInt(1, rs.getInt("numCours"));
				pst_Ele.setInt(1, rs.getInt("numEleve"));
				pst_Cli.setInt(1, rs.getInt("numClient"));
				pst_Mon.setInt(1, rs.getInt("numMoniteur"));
				pst_Acc.setInt(1, rs.getInt("numMoniteur"));

				ResultSet rs_Sem = pst_Sem.executeQuery();
				ResultSet rs_Cou = pst_Cou.executeQuery();
				ResultSet rs_Ele = pst_Ele.executeQuery();
				ResultSet rs_Cli = pst_Cli.executeQuery();
				ResultSet rs_Acc = pst_Acc.executeQuery();
				ResultSet rs_Mon = pst_Mon.executeQuery();

				while (rs_Sem.next()) { S = new Semaine(rs_Sem.getInt("numSemaine"), rs_Sem.getBoolean("CongeScolaireOuNon"), rs_Sem.getDate("dateDebut"), rs_Sem.getDate("dateFin"), rs_Sem.getInt("numSemaineDansAnnee")); }
				while (rs_Cou.next()) { C = new Cours(rs_Cou.getInt("numCours"), rs_Cou.getString("nomSport"), rs_Cou.getInt("prix"), rs_Cou.getInt("minEleve"), 
						rs_Cou.getInt("maxEleve"), rs_Cou.getString("periodeCours")); }
				while (rs_Ele.next()) { E = new Eleve(rs_Ele.getInt("numEleve"), rs_Ele.getString("nom"), rs_Ele.getString("prenom"),
						rs_Ele.getString("adresse"), rs_Ele.getString("sexe"), rs_Ele.getDate("dateNaissance")); }
				while (rs_Cli.next()) { Cli = new Client(rs_Cli.getInt("numPersonne"), rs_Cli.getString("nom"), rs_Cli.getString("prenom"),
						rs_Cli.getString("adresse"), rs_Cli.getString("sexe"), rs_Cli.getDate("dateNaissance"), rs_Cli.getString("pseudo"),
						rs_Cli.getString("mdp"), rs_Cli.getInt("typeUtilisateur"), rs_Cli.getString("adresseFacturation")); }
				while(rs_Acc.next()){ listeAccred.add(new Accreditation(rs_Acc.getString("nomAccreditation"))); }
				while (rs_Mon.next()) { M = new Moniteur(rs_Mon.getInt("numMoniteur"), rs_Mon.getString("nom"), rs_Mon.getString("prenom"),
						rs_Mon.getString("adresse"), rs_Mon.getString("sexe"), rs_Mon.getDate("dateNaissance"), rs_Mon.getString("pseudo"), rs_Mon.getString("mdp"),
						rs_Mon.getInt("typeUtilisateur"), listeAccred); }

				Reservation reservation = new Reservation(rs.getInt("heureDebut"), rs.getInt("heureFin"), rs.getInt("numReservation"), S, C, E, Cli, M);
				liste.add(reservation);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}
	
	public  ArrayList<Reservation> getListSemainePerdiodeMoniteur(int numMoniteur, int numSemaine, String periode) {
		ArrayList<Reservation> liste = new ArrayList<Reservation>();

		PreparedStatement pst = null;
		try {
			Semaine S 	= new Semaine();
			Cours C 	= new Cours();
			Eleve E 	= new Eleve();
			Client Cli 	= new Client();
			Moniteur M 	= new Moniteur();

			String sql = "SELECT * FROM Cours "
					+ "INNER JOIN CoursMoniteur ON CoursMoniteur.numCours = Cours.numCours "
					+ "INNER JOIN CoursSemaine ON CoursSemaine.numCours = Cours.numCours "
					+ "INNER JOIN ReservationCours ON ReservationCours.numCours = Cours.numCours "
					+ "INNER JOIN Reservation ON Reservation.numReservation = ReservationCours.numReservation "
					+ "INNER JOIN ReservationClient ON ReservationClient.numReservation = Reservation.numReservation "
					+ "INNER JOIN ReservationEleve ON ReservationEleve.numReservation = Reservation.numReservation "
					+ "WHERE CoursSemaine.numSemaine = ? AND Cours.periodeCours = ? ;";
			
			pst = this.connect.prepareStatement(sql);
			//pst.setInt(1, numMoniteur);
			pst.setInt(1, numSemaine);
			pst.setString(2, periode);
			System.out.println("ReservationDao -> numSemaine : " + numSemaine);
			System.out.println("ReservationDao -> periode : " + periode);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				ArrayList<Accreditation> listeAccred = new ArrayList<Accreditation>();

				String selectSemaine 	= "SELECT * FROM Semaine	WHERE numSemaine 	= ? ";
				String selectCours 		= "SELECT * FROM Cours 		WHERE numCours 		= ? ";
				String selectEleve 		= "SELECT * FROM Eleve "
						+ "INNER JOIN Personne ON Personne.numPersonne = Eleve.numEleve "
						+ "WHERE numPersonne =  ? ";
				String selectClient 	= "SELECT * FROM Client 	INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Client.numClient "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ?  ";
				String selectMoniteur 	= "SELECT * FROM Moniteur	"
						+ "INNER JOIN Utilisateur ON Utilisateur.numUtilisateur = Moniteur.numMoniteur "
						+ "INNER JOIN Personne ON Personne.numPersonne = Utilisateur.numUtilisateur "
						+ "WHERE numPersonne =  ? ";
				String selectAccredMoni = "Select * from Accreditation INNER JOIN LigneAccreditation "
						+ "ON Accreditation.numAccreditation = LigneAccreditation.numAccreditation WHERE numMoniteur = ?;";

				PreparedStatement pst_Sem = connect.prepareStatement(selectSemaine);
				PreparedStatement pst_Cou = connect.prepareStatement(selectCours);
				PreparedStatement pst_Ele = connect.prepareStatement(selectEleve);
				PreparedStatement pst_Cli = connect.prepareStatement(selectClient);
				PreparedStatement pst_Mon = connect.prepareStatement(selectMoniteur);
				PreparedStatement pst_Acc = connect.prepareStatement(selectAccredMoni);

				pst_Sem.setInt(1, rs.getInt("numSemaine"));
				pst_Cou.setInt(1, rs.getInt("numCours"));
				pst_Ele.setInt(1, rs.getInt("numEleve"));
				pst_Cli.setInt(1, rs.getInt("numClient"));
				pst_Mon.setInt(1, rs.getInt("numMoniteur"));
				pst_Acc.setInt(1, rs.getInt("numMoniteur"));

				ResultSet rs_Sem = pst_Sem.executeQuery();
				ResultSet rs_Cou = pst_Cou.executeQuery();
				ResultSet rs_Ele = pst_Ele.executeQuery();
				ResultSet rs_Cli = pst_Cli.executeQuery();
				ResultSet rs_Acc = pst_Acc.executeQuery();
				ResultSet rs_Mon = pst_Mon.executeQuery();

				while (rs_Sem.next()) { S = new Semaine(rs_Sem.getInt("numSemaine"), rs_Sem.getBoolean("CongeScolaireOuNon"), rs_Sem.getDate("dateDebut"), rs_Sem.getDate("dateFin"), rs_Sem.getInt("numSemaineDansAnnee")); }
				while (rs_Cou.next()) { C = new Cours(rs_Cou.getInt("numCours"), rs_Cou.getString("nomSport"), rs_Cou.getInt("prix"), rs_Cou.getInt("minEleve"), 
						rs_Cou.getInt("maxEleve"), rs_Cou.getString("periodeCours")); }
				while (rs_Ele.next()) { E = new Eleve(rs_Ele.getInt("numEleve"), rs_Ele.getString("nom"), rs_Ele.getString("prenom"),
						rs_Ele.getString("adresse"), rs_Ele.getString("sexe"), rs_Ele.getDate("dateNaissance")); }
				while (rs_Cli.next()) { Cli = new Client(rs_Cli.getInt("numPersonne"), rs_Cli.getString("nom"), rs_Cli.getString("prenom"),
						rs_Cli.getString("adresse"), rs_Cli.getString("sexe"), rs_Cli.getDate("dateNaissance"), rs_Cli.getString("pseudo"),
						rs_Cli.getString("mdp"), rs_Cli.getInt("typeUtilisateur"), rs_Cli.getString("adresseFacturation")); }
				while(rs_Acc.next()){ listeAccred.add(new Accreditation(rs_Acc.getString("nomAccreditation"))); }
				while (rs_Mon.next()) { M = new Moniteur(rs_Mon.getInt("numMoniteur"), rs_Mon.getString("nom"), rs_Mon.getString("prenom"),
						rs_Mon.getString("adresse"), rs_Mon.getString("sexe"), rs_Mon.getDate("dateNaissance"), rs_Mon.getString("pseudo"), rs_Mon.getString("mdp"),
						rs_Mon.getInt("typeUtilisateur"), listeAccred); }

				Reservation reservation = new Reservation(rs.getInt("heureDebut"), rs.getInt("heureFin"), rs.getInt("numReservation"), S, C, E, Cli, M);
				liste.add(reservation);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}
	
	@Override public String calculerPlaceCours(int numCours, int numSemaine) { return -1 + ""; }
	@Override public ArrayList<Reservation> getListCoursSelonId(int idMoniteur) { return null; }
	@Override public ArrayList<Reservation> getListCoursCollectifSelonId(int numMoniteur, int numEleve, String periode) { return null; }
	@Override public ArrayList<Reservation> getListCoursParticulierSelonId(int numMoniteur, int numEleve, String periode) { return null; }
	@Override public ArrayList<Reservation> getListEleveSelonAccredProfEtCours(int numSemaine, int numMoniteur, String periode, int cours) { return null; }
}

