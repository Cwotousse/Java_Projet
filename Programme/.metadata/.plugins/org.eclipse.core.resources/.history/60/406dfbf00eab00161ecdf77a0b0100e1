package be.mousty.dao;
/**
Classe DAO permettant à effectuer des requêtes et les transformer en objet POJO.
@author Adrien MOUSTY
@version Finale 1.3.3
@category DAO
*/
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import be.mousty.pojo.DisponibiliteMoniteur;
import be.mousty.pojo.Moniteur;
import be.mousty.pojo.Semaine;

public class DisponibiliteMoniteurDAO extends DAO<DisponibiliteMoniteur> {
	AbstractDAOFactory adf = AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
	DAO<Semaine> SemaineDAO = adf.getSemaineDAO();
	DAO<Moniteur> MoniteurDAO = adf.getMoniteurDAO();

	public DisponibiliteMoniteurDAO(Connection conn) { super(conn); }

	@Override
	public int create (DisponibiliteMoniteur obj) { 
		PreparedStatement rechNumDispo = null;
		try {
			String ins_DMO = "INSERT INTO DisponibiliteMoniteur (numMoniteur, numSemaine, disponible) VALUES (?,?,?)";
			PreparedStatement pst_DMO = connect.prepareStatement(ins_DMO);

			pst_DMO.setInt(1, obj.getNumMoniteur());
			pst_DMO.setInt(2, obj.getNumSemaine());
			pst_DMO.setBoolean(3, obj.getDisponible());

			pst_DMO.executeUpdate();
			pst_DMO.close();

			String sql = "SELECT MAX(numDispo) FROM DisponibiliteMoniteur";
			rechNumDispo = this.connect.prepareStatement(sql);
			ResultSet rs = rechNumDispo.executeQuery();
			while (rs.next()) {
				obj.setNumDispo(rs.getInt(1));
			}
			System.out.println("rechNumDispoDao -> " + obj.getNumDispo());
			return obj.getNumDispo();
		} 
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (rechNumDispo != null) {
				try { rechNumDispo.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return -1;
	}

	public boolean delete	(DisponibiliteMoniteur obj) { return false; }
	public boolean update	(DisponibiliteMoniteur obj) { return false; }

	// On cherche une DisponibiliteMoniteur grâce à son id
	public DisponibiliteMoniteur find(int id) { return null;
	/*DisponibiliteMoniteur coursCollectif = new DisponibiliteMoniteur();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM DisponibiliteMoniteur INNER JOIN Cours ON DisponibiliteMoniteur.numDisponibiliteMoniteur = Cours.numCours WHERE numDisponibiliteMoniteur = ?;";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet result = pst.executeQuery();
			while (result.next()) {
				// int numCours, String nomSport, double prix, int minEleve, int maxEleve, String periodeCours, String categorieAge, String niveauCours
				coursCollectif = new DisponibiliteMoniteur(result.getInt("numCours"), result.getString("nomSport"), result.getInt("prix"),
						result.getInt("minEleve"), result.getInt("maxEleve"), result.getString("periodeCours"), 
						result.getString("categorieAge"), result.getString("niveauCours"));
			}
			return coursCollectif;
		}
		catch (SQLException e) { e.printStackTrace(); return null; }
		finally { 
			if (pst != null) {
				try {
					pst.close();
				}
				catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}*/
	}
	/**
		Objectif : Retourner la liste complète des enregistrements contenu dans une table
		@version Finale 1.3.3
		@return La liste complète des utilisateurs.
	 */
	@Override public ArrayList<DisponibiliteMoniteur> getList() { 
		ArrayList<DisponibiliteMoniteur> liste = new ArrayList<DisponibiliteMoniteur>();

		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM DisponibiliteMoniteur";
			pst = this.connect.prepareStatement(sql);
			ResultSet res_rec_disp_mon = pst.executeQuery();
			while (res_rec_disp_mon.next()) {
				DisponibiliteMoniteur DM = new DisponibiliteMoniteur();
				DM.setNumDispo(res_rec_disp_mon.getInt("numDispo"));
				DM.setNumMoniteur(res_rec_disp_mon.getInt("numMoniteur"));
				DM.setNumSemaine(res_rec_disp_mon.getInt("numSemaine"));
				DM.setDisponible( res_rec_disp_mon.getBoolean("disponible"));
				liste.add(DM);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}

	@Override
	public ArrayList<DisponibiliteMoniteur> getMyListSelonID(int idMoniteur, long nonUsed, int nonUsed2, String nonUsed3) { 
		ArrayList<DisponibiliteMoniteur> liste = new ArrayList<DisponibiliteMoniteur>();

		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM DisponibiliteMoniteur WHERE numMoniteur = ? ";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, idMoniteur);
			ResultSet res_rec_disp_mon = pst.executeQuery();
			while (res_rec_disp_mon.next()) {
				DisponibiliteMoniteur DM = new DisponibiliteMoniteur();
				DM.setNumDispo(res_rec_disp_mon.getInt("numDispo"));
				DM.setNumMoniteur(res_rec_disp_mon.getInt("numMoniteur"));
				DM.setNumSemaine(res_rec_disp_mon.getInt("numSemaine"));
				DM.setDisponible( res_rec_disp_mon.getBoolean("disponible"));
				liste.add(DM);
			}
		}
		catch (SQLException e) { e.printStackTrace(); }
		finally {
			if (pst != null) {
				try { pst.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return liste;
	}

	public void creerTouteDisponibilites(){
		for (Moniteur M : MoniteurDAO.getList()){ creerTouteDisponibilitesSelonMoniteur(M.getNumPersonne()); }
	}

	public void creerTouteDisponibilitesSelonMoniteur(int numMoniteur){
		ArrayList<Semaine> S = SemaineDAO.getList();
		for (int i = S.get(0).getNumSemaine(); i < (S.get(0).getNumSemaine() + S.size()); i++){
			DisponibiliteMoniteur DM = new DisponibiliteMoniteur();
			//DM.setNumDispo(res_rec_disp_mon.getInt("numDispo"));
			DM.setNumMoniteur(numMoniteur);
			DM.setNumSemaine(i);
			DM.setDisponible(true);
			create(DM);
		}
	}

	// Change la disponibilite du moniteur, retroune null si n'a pas fonctionné
	@Override
	public ArrayList<DisponibiliteMoniteur> getListSelonCriteres(DisponibiliteMoniteur obj) {
		PreparedStatement pst_get_val = null;
		ArrayList<DisponibiliteMoniteur> listBoolean = new ArrayList<DisponibiliteMoniteur>();
		try {
			boolean resBool = false;
			String sql_getValue = "Select disponible from DisponibiliteMoniteur wHERE numSemaine = ? and numMoniteur = ?;";
			String sql_update = "Update DisponibiliteMoniteur SET disponible= ? WHERE numSemaine = ? and numMoniteur = ?;";

			pst_get_val = connect.prepareStatement(sql_getValue);

			pst_get_val.setInt(1, obj.getNumSemaine());
			pst_get_val.setInt(2,  obj.getNumMoniteur());

			ResultSet res_get_val = pst_get_val.executeQuery();
			while (res_get_val.next()) { resBool = res_get_val.getBoolean("disponible"); }

			PreparedStatement pst_upt = connect.prepareStatement(sql_update);

			pst_upt.setBoolean(1, !resBool); // L'inverse qu'actuellement
			pst_upt.setInt(2, obj.getNumSemaine());
			pst_upt.setInt(3, obj.getNumMoniteur());

			pst_upt.executeUpdate();
			pst_upt.close();
			listBoolean = null;
		} 
		catch (SQLException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();

		}
		finally {
			if (pst_get_val != null) {
				try { pst_get_val.close(); }
				catch (SQLException e) { e.printStackTrace(); }
			}
		}
		return listBoolean;
		// anciennement un boolean
		// s'il retourne null alors ça a bien modifie
	}

	@Override
	public DisponibiliteMoniteur getId(DisponibiliteMoniteur obj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean updateAssurance(int numEleve, int numSemaine, String periode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int valeurReduction(int numSem, int numEleve, double prixCours) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public String calculerPlaceCours(int numCours, long numSemaine, int idMoniteur) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void AjouterSemainesDansDB(String start, String end) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public long getDateDebutReserv(int numReserv) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ArrayList<DisponibiliteMoniteur> getReservationAnnulee(int numUtilisateur, int typeUtilisateur) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean besoinDupdateOuNonAssurance(int numEleve, int numSemaine, String periode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String getCategorieReservation(int numMoniteur, int numSemaine, String periode) {
		// TODO Auto-generated method stub
		return null;
	}

}