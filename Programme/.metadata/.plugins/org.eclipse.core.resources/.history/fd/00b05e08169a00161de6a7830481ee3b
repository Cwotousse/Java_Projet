package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import POJO.Moniteur;

public class MoniteurDAO extends DAO<Moniteur>{

	public MoniteurDAO(Connection conn) { super(conn); }

	public boolean create(Moniteur obj) {
		//On ajoute les données nécessaires dans la table personne
		try {
			String requete = "INSERT INTO Personne (nom, prenom, adresse, dateNaissance, sexe) VALUES (?,?,?,?,?)";
			PreparedStatement pst = connect.prepareStatement(requete);

			pst.setString(1, obj.getNom());
			pst.setString(2, obj.getPre());
			pst.setString(3, obj.getAdresse());
			pst.setDate(4, obj.getDateNaissance());
			pst.setString(5, obj.getSexe());

			pst.executeUpdate();
			pst.close();

			//on récupère l'id crée en dernier dans la table
			//String requete2 = "SELECT MAX(numPersonne) FROM Personne";
//			PreparedStatement pst2 = connect.prepareStatement(requete2);
//			ResultSet resultat = pst2.executeQuery();
//			pst2.close();
//			int numUtilisateur = -1;
//			if(resultat.next()){
//				numUtilisateur = resultat.getInt(1);
				//on l'utilise pour ajouter les données dans la table Utilisateur
				String requete3 = "INSERT INTO Utilisateur (pseudo, mdp, typeUtilisateur) VALUES (?,?,?)";
				PreparedStatement pst3 = connect.prepareStatement(requete3);

				//pst3.setInt(1, numUtilisateur);     //L'id qui lie la table moniteur a la table personne
				pst3.setString(1, obj.getPseudo());
				pst3.setString(2, obj.getMdp());
				pst3.setInt(3, obj.getTypeUtilisateur());

				pst3.executeUpdate();
				pst3.close();

				//on récupère l'id crée en dernier dans la table
//				String requete4 = "SELECT MAX(numUtilisateur) FROM Utilisateur";
//				PreparedStatement pst4 = connect.prepareStatement(requete4);
//				ResultSet resultat4 = pst4.executeQuery();
//				pst4.close();
//				int numMoniteur = -1;
//				if(resultat4.next()){
//					numUtilisateur = resultat.getInt(1);
					//on l'utilise pour ajouter les données dans la table Utilisateur
					String requete5 = "INSERT INTO Moniteur (adresseFacturation) VALUES (?)";
					PreparedStatement pst5 = connect.prepareStatement(requete5);

					//pst5.setInt(1, numMoniteur);     //L'id qui lie la table moniteur a la table utilisateur
					pst5.setString(1, obj.getAdresseFacturation());
					pst5.executeUpdate();
					pst5.close();
					System.out.println("Ajout d'un moniteur effectue");
				//}
				//else { System.out.println("Quitte ajout 2"); return false; } 
				
			//}
			// { System.out.println("Quitte ajout 1"); return false; }
		} 
		catch (SQLException e) {
			System.out.println(obj.getDateNaissance());
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		return false;
	}

	public boolean delete(Moniteur obj) {
		return false;
	}

	public boolean update(Moniteur obj) {
		return false;
	}

	// On cherche une Moniteur grâce à son id
	public Moniteur find(int id) {
		Moniteur moniteur = new Moniteur();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Moniteur WHERE numMoniteur = ?";
			pst = this.connect.prepareStatement(sql);
			pst.setInt(1, id);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				moniteur.setNumUtilisateur(rs.getInt("numUtilisateur"));
				moniteur.setNumMoniteur(rs.getInt("numMoniteur"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return moniteur;
	}



	public ArrayList<Moniteur> getList() {
		Moniteur moniteur = null;
		ArrayList<Moniteur> liste = new ArrayList<Moniteur>();
		PreparedStatement pst = null;
		try {
			String sql = "SELECT * FROM Moniteur";
			pst = this.connect.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			while (rs.next()) {
				moniteur.setNumUtilisateur(rs.getInt("numUtilisateur"));
				moniteur.setNumMoniteur(rs.getInt("numMoniteur"));
				liste.add(moniteur);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pst != null) {
				try {
					pst.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return liste;
	}

	@Override
	public Moniteur verifPseudoMdp(String text, String text2) {
		// TODO Auto-generated method stub
		return null;
	}
}
