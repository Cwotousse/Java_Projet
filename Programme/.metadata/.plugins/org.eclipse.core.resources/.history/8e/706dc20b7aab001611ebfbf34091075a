package be.mousty.dao;
/**
Classe DAO permettant à effectuer des requêtes et les transformer en objet POJO.
@author Adrien MOUSTY
@version Finale 1.3.3
@category DAO
*/
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

//Notre classe singleton : création d'un seule et unique instance de connexion
public class SingletonConnection {
	// Objet de connexion
	private static Connection connect = getInstance();

	// Caractéristique du singleton ! Le constructeur privé :
	private SingletonConnection() {
		try {
			// Chargement de la classe du driver par la JVM
			//Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
			Class.forName("org.sqlite.JDBC");
			connect = DriverManager.getConnection("jdbc:sqlite:./DB_Java_Ski.db; foreign keys=true;");
		}
		catch (SQLException ex) { System.out.println("Erreur JDBC: " + ex.getMessage()); }
		catch (ClassNotFoundException ex) {
			System.out.println("Classe de driver introuvable : " + ex.getMessage());
			System.exit(0);
		}
	}

	// Méthode qui va nous retourner notre instance et la créer si elle n'existe
	// pas
	public static Connection getInstance() {
		if (connect == null) {
			System.out.println("Instanciation de la connexion.");
			new SingletonConnection();
		}
		else System.out.println("Connexion réussie!");
		return connect;
	}
}