package be.mousty.fenetre;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicProgressBarUI;

import be.mousty.utilitaire.ProgressCircleUI;
import javax.swing.JButton;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class F_PayerReservation extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1722632999901224579L;
	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					F_PayerReservation frame = new F_PayerReservation();
					frame.setVisible(true);

					

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public F_PayerReservation() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JButton btn_pay = new JButton("Payer");
		btn_pay.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				//EventQueue.invokeLater(() -> {
					JProgressBar progress = new JProgressBar();
					// use JProgressBar#setUI(...) method
					progress.setUI(new ProgressCircleUI());
					progress.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
					progress.setStringPainted(true);
					progress.setFont(progress.getFont().deriveFont(24f));
					progress.setForeground(Color.ORANGE);

					(new Timer(50, e -> {
						int iv = Math.min(100, progress.getValue() + 1);
						progress.setValue(iv);
					})).start();

					//JPanel p = new JPanel();
					contentPane.add(progress);
					//return p;
				//});
			}
		});
		btn_pay.setBounds(159, 315, 97, 25);
		contentPane.add(btn_pay);

		
		JProgressBar progress = new JProgressBar();
		// use JProgressBar#setUI(...) method
		progress.setUI(new ProgressCircleUI());
		progress.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		progress.setStringPainted(true);
		progress.setFont(progress.getFont().deriveFont(24f));
		progress.setForeground(Color.ORANGE);

		(new Timer(50, e -> {
			int iv = Math.min(100, progress.getValue() + 1);
			progress.setValue(iv);
		})).start();

		//JPanel p = new JPanel();
		contentPane.add(progress);
		/*public static void main(String... args) {
			EventQueue.invokeLater(() -> {
				JFrame f = new JFrame();
				f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
				f.getContentPane().add(new CircularProgressTest().makeUI());
				f.setSize(320, 240);
				f.setLocationRelativeTo(null);
				f.setVisible(true);
			});
		}*/
	}
}

class CircularProgressTest {
	public JComponent makeUI() {
		JProgressBar progress = new JProgressBar();
		// use JProgressBar#setUI(...) method
		progress.setUI(new ProgressCircleUI());
		progress.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
		progress.setStringPainted(true);
		progress.setFont(progress.getFont().deriveFont(24f));
		progress.setForeground(Color.ORANGE);

		(new Timer(50, e -> {
			int iv = Math.min(100, progress.getValue() + 1);
			progress.setValue(iv);
		})).start();

		JPanel p = new JPanel();
		p.add(progress);
		return p;
	}
}
