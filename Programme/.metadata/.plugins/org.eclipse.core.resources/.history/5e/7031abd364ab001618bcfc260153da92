package be.mousty.accessToDao;
/**
	Classe métier relatif liée à la classe Client et ClientDAO.
	@author Adrien MOUSTY
	@version Finale 1.3.4
	@category Métier
*/
import java.sql.Date;
import java.util.ArrayList;
import be.mousty.dao.AbstractDAOFactory;
import be.mousty.dao.DAO;
import be.mousty.pojo.Accreditation;
import be.mousty.pojo.Client;
import be.mousty.pojo.Eleve;
import be.mousty.pojo.Reservation;

public class ClientATD extends UtilisateurATD{
	// VARIABLES
	private String 	adresseFacturation;
	private ArrayList<Reservation> listReservCli;
	private ArrayList<Eleve> listEleveCli;
	
	// CONSTRUCTEURS
	public ClientATD(){}
	public ClientATD(Client C){
			super(C.getNom(), C.getPre(), C.getAdresse(), C.getSexe(), C.getDateNaissance(), C.getPseudo(),
					C.getMdp(), C.getTypeUtilisateur());
			this.adresseFacturation = C.getAdresseFacturation();
			this.listReservCli = C.getListReservCli();
			this.listEleveCli = C.getListEleveCli();
	}
	
	public ClientATD(String nom, String pre, String adresse, String sexe, Date dateNaissance,
			String pseudo, String mdp, int typeUtilisateur, String adresseFacturation, ArrayList<Reservation> listReservCli, ArrayList<Eleve> listEleveCli){
		super(nom, pre, adresse, sexe, dateNaissance, pseudo, mdp, typeUtilisateur);
		this.adresseFacturation = adresseFacturation;
		this.listReservCli = listReservCli;
		this.listEleveCli = listEleveCli;
	}
	
	// APPEL AUX METHODES DAO DANS LES CLASSES METIER
	AbstractDAOFactory adf 	= AbstractDAOFactory.getFactory(AbstractDAOFactory.DAO_FACTORY);
	DAO<Client> ClientDAO 	= adf.getClientDAO();
	public int					create				(Client c) 		{ return ClientDAO.create(c); 	 	}
	public boolean 				delete				()	 			{ return ClientDAO.delete(null); 	}
	public Client 				getId				(Client c) 		{ return ClientDAO.getId(c); 		}
	public boolean 				update				(Client c) 		{ return ClientDAO.update(c); 		}
	public Client 				find				(int id) 		{ return ClientDAO.find(id); 		} 
	public ArrayList<Client> 	getListCli			() 				{ return ClientDAO.getList(); 		} 
	public ArrayList<Client> 	getListSelonCriteres(Client c) 		{ return ClientDAO.getListSelonCriteres(c); 			}
	
	public boolean changeClientToEleve(int idClient){
		Client C = find(idClient);
		if(C != null){
			System.out.println("F_Client -> ajout eleve");
			//= new Eleve(, , , , ,);
			Eleve E = new Eleve();
			E.setNumEleve(C.getNumPersonne());
			this.setDateNaissance(C.getDateNaissance());
			E.setCategorie(this.attributerCategorie());
			E.setNumClient(idClient);
			E.setNumPersonne(C.getNumPersonne());
			E.setNom(C.getNom());
			E.setPre(C.getPre());
			E.setDateNaissance( C.getDateNaissance());
			E.setAdresse(C.getAdresse());
			E.setSexe(C.getSexe());
			EleveATD EATD = new EleveATD(E);
			if(EATD.create(E) != -1) return true;
		}
		return false;
	}
	
	public int inscriptionClient(){
		Client C = new Client();
		C.setAdresseFacturation(this.getAdresseFacturation());
		C.setPseudo(this.getPseudo());
		C.setMdp(this.getMdp());
		C.setTypeUtilisateur(2);
		C.setNom(this.getNom());
		C.setPre(this.getPre());
		C.setDateNaissance(this.getDateNaissance());
		C.setAdresse(this.getAdresse());
		C.setSexe(this.getSexe());
		return create(C);
	}
	
	private ArrayList<Reservation> listReservCli;
	// Transformation pour les listes réservation
	public ArrayList<AccreditationATD> changeTypeAccredilist(ArrayList<Accreditation> A){
		ArrayList<AccreditationATD> LA = new ArrayList<AccreditationATD>();
		for(int i = 0; i < A.size(); i++){
			AccreditationATD AATD = new AccreditationATD();
			AATD.setNom(A.get(i).getNomAccreditation());
			LA.add(AATD);
		}
		return LA;
	}
	

	public ArrayList<Accreditation> changeTypeAccredilistEnATD(ArrayList<AccreditationATD> A){
		
		ArrayList<Accreditation> LA = new ArrayList<Accreditation>();
		for(int i = 0; i < A.size(); i++){
			Accreditation AATD = new Accreditation();
			AATD.setNomAccreditation((A.get(i).getNom()));
			switch(AATD.getNomAccreditation()){
			case "Snowboard" : AATD.setNumAccreditation(1);
				break;
			case "Ski" : AATD.setNumAccreditation(2);
				break;
			case "Ski de fond" : AATD.setNumAccreditation(3);
				break;
			case "Telemark" : AATD.setNumAccreditation(4);
				break;
			case "Enfant" :AATD.setNumAccreditation(5);
				break;
			case "Adulte" :AATD.setNumAccreditation(6);
				break;
			}
			LA.add(AATD);
		}
		return LA;
	}
	
	// Transformation pour les listes Eleve
	public ArrayList<EleveATD> changeTypeEleveList(ArrayList<Eleve> listE){
		ArrayList<EleveATD> LE = new ArrayList<EleveATD>();
		for(int i = 0; i < listE.size(); i++){
			EleveATD EATD = new EleveATD();
			EATD.setAdresse(listE.get(i).getAdresse());
			EATD.setCategorie(listE.get(i).getCategorie());
			EATD.setDateNaissance(listE.get(i).getDateNaissance());
			EATD.setNom(listE.get(i).getNom());
			EATD.setPre(listE.get(i).getPre());
			EATD.setSexe(listE.get(i).getSexe());
			//System.out.println(EATD.getSexe());
			LE.add(EATD);
		}
		return LE;
	}
	

	public ArrayList<Eleve> changeTypeElevelistEnATD(ArrayList<EleveATD> EATD, int idClient){
		Client C = find(idClient);
		ArrayList<Eleve> LE = new ArrayList<Eleve>();
		for(int i = 0; i < EATD.size(); i++){
			Eleve E = new Eleve();
			E.setNumClient(getId(this));
			E.setNumEleve(-1);
			E.setDateNaissance(getDateNaissance());
			E.setCategorie(this.attributerCategorie());
			E.setNom(getNom());
			E.setPre(getPre());
			E.setAdresse(getAdresse());
			E.setSexe(getSexe());
			LE.add(E);
		}
		return LE;
	}
	
	// PROPRIETES
	public String getAdresseFacturation	() 				{ return adresseFacturation; }
	public void setAdresseFacturation 	(String el) 	{ this.adresseFacturation  = el; }
	
	public ArrayList<Reservation> getListReservCli() { return listReservCli; }
	public void setListReservCli(ArrayList<Reservation> listReservCli) { this.listReservCli = listReservCli; }

	public ArrayList<Eleve> getListEleveCli() { return listEleveCli; }
	public void setListEleveCli(ArrayList<Eleve> listEleveCli) { this.listEleveCli = listEleveCli; }
}

